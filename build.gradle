buildscript {
    ext.kotlin_repository = {
        if (kotlin_version.endsWith('-SNAPSHOT')) return 'https://oss.sonatype.org/content/repositories/snapshots'
        return 'https://dl.bintray.com/kotlin/kotlin-eap'
    }()

    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url kotlin_repository }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies' }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomic_fu_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
    }
}

ext.configuredVersion = project.hasProperty('releaseVersion') ? project.releaseVersion : project.version
ext.globalM2 = "$buildDir/m2"
ext.publishLocal = project.hasProperty('publishLocal')

allprojects {
    group = 'io.ktor'
    version = configuredVersion

    repositories {
        mavenLocal()
        maven { url 'https://dl.bintray.com/kotlin/kotlinx/' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url kotlin_repository }

        jcenter()
    }

    apply plugin: 'kotlin-multiplatform'
    apply plugin: 'kotlinx-atomicfu'

    apply from: rootProject.file('gradle/dokka.gradle')
    apply from: rootProject.file('gradle/common.gradle')
    apply from: rootProject.file('gradle/native.gradle')
    apply from: rootProject.file('gradle/js.gradle')
//    apply from: rootProject.file('gradle/publish.gradle')

    kotlin {
        targets {
            if (System.getProperty('idea.active') == 'true') {
                fromPreset(presets.macosX64, 'native')
            }
        }

        configure(sourceSets) {
            def srcDir = name.endsWith('Main') ? 'src' : 'test'
            def platform = name[0..-5]

            kotlin.srcDir "$platform/$srcDir"
        }

        configure(targets) {
            compilations.all { compilation ->
                def compileTask = tasks.getByName(compilation.compileKotlinTaskName)
                compileTask.kotlinOptions.freeCompilerArgs = [
                    "-progressive",
                    "-Xuse-experimental=" +
                        "kotlin.Experimental," +
                        "io.ktor.server.engine.EngineAPI," +
                        "io.ktor.util.KtorExperimentalAPI" +
                        "io.ktor.util.InternalAPI"
                ]
            }
        }
    }

    configurations { testOutput }

//    configure([compileKotlinJvm, compileTestKotlinJvm]) {
//        kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.Experimental']
//    }

//    if (project.name != 'ktor-server-core' && project.name.contains('ktor-server')) {
//        compileKotlinJvm.kotlinOptions.freeCompilerArgs += [
//            '-Xuse-experimental=kotlin.Experimental,io.ktor.server.engine.EngineAPI'
//        ]
//    }

//    def skipDokka = project.path.contains("ktor-samples") || project == rootProject || project.name in dokkaExcludes || platform != 'jvm'

//    if (!skipDokka) {
//        apply from: rootProject.file('gradle/dokka.gradle')
//    }

//    task sourceJar(type: Jar, dependsOn: classes) {
//        classifier 'sources'
//        from sourceSets.main.kotlin
//        duplicatesStrategy DuplicatesStrategy.EXCLUDE
//        def platformSrc = sourceSets.main.allSource
//        def commonSrc = rootProject.sourceSets.main.allSource
//        from(platformSrc + commonSrc)
//    }
//
    task emptyJar(type: Jar) {
        classifier 'javadoc'
    }
//
//    tasks.build.dependsOn(['sourceJar', 'emptyJar'])

//    task jarTest(type: Jar, dependsOn: jvmTestClasses) {
//        from kotlin.targets.jvm.compilations.test.output
//        classifier = 'test'
//    }

//    if (project.hasProperty('teamcity')) {
//        afterEvaluate {
//            tasks.withType(Class.forName('org.gradle.nativeplatform.test.tasks.RunTestExecutable')) {
//                args '--ktest_logger=TEAMCITY'
//            }
//        }
//    }
//    configure(targets) {
//        compilations.all { compilation ->
//            def compileTask = tasks.getByName(compilation.compileKotlinTaskName)
//            compileTask.kotlinOptions.freeCompilerArgs += [useExperimentalOptionString, "-progressive"]
//        }
//    }
}

//afterReleaseBuild.dependsOn bintrayUpload
